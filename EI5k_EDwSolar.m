function results = EI5k_EDwSolar()
%   EI5k_EDwSolar takes historial/forecast NYISO load data, scales the load
%   in the origional MPC file according to the NYISO zonal load values for
%   a given hour. Then, using the geographic location of each 5k bus, the
%   program assigns each solar farm to the closest bus, and subtracts the
%   electricity generated by the solar farm for the hour from the load at
%   the bus. Finally, the DCOPF is run for the hour. This process is
%   repeated within a loop to achieve multi-period economic dispatch, which
%   accounts for ramping limits on different generator types. Temporal
%   profiles for all NYS generators are output by this program.
%   Last Updated by Jeff on 6/28/2018.

clear
close all
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Read in all necesscary data & define constants.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Input the episode start date in form datestr('mm/dd/yy','dd-mmm-yyyy');
st_day = datestr('07/18/13','dd-mmm-yyyy');
% st_day = datestr('07/28/15','dd-mmm-yyyy');
plot_loads = 0;

%Load the EI 5k-bus MatPower case file
define_constants;
mpc = loadcase('case_ei5k_v10_g524');
True_PMIN = mpc.gen(:,PMIN);
True_PMAX = mpc.gen(:,PMAX);

%Read in bus location data (non-NYISO is zone 0) 
load('Bus_information.mat')
bus_zone = Zone_let2num( bus_zone_letter );
mpc.bus(:,BUS_AREA) = bus_zone; %define the area of each bus
 
bus_Check = mpc.bus(:,BUS_I) - bus_ID;
Missing_bus = mpc.bus(bus_Check~=0); %Buses missing from 'bus location info  
%for ei added missing buses fixed zones.xlsx'


%Read in NYISO zonal load data
load_file = sprintf('Test_Input_Data/episode_%s_profiles',st_day);
load(load_file,'episode_Load')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Run MatPower Case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Identify loads at buses within NYS (zones from 'bus location info for ei 
%added missing buses fixed zones.xlsx')
NYS_bus_orig_load = mpc.bus(bus_zone > 0,PD);

%Scale load by NYISO zonal quantity. If load_zone(b) = 0, the loads at bus
%b will not be modified. Zones from load_region.xlsx.
opt.scale = 'QUANTITY';
mpc = scale_load(episode_Load(1,:), mpc, bus_zone, opt);

%Set generator minimums to zero (necessary for convergence)
mpc.gen(mpc.gen(:, PMIN)>0, PMIN) = 0;

%Plot loads
if plot_loads == 1
    %Replot scaled loads
    NYS_bus_scaled_load = mpc.bus(bus_zone > 0,PD);
    scatter(1:141,NYS_bus_scaled_load,'DisplayName','Scaled Load','MarkerEdgeColor',[1 0 0],...
        'Marker','*');
    hold on
    scatter(1:141,NYS_bus_orig_load,'DisplayName','Original Load','MarkerEdgeColor',[0 0 0]);
    xlabel('NYS Bus');
    ylabel('Load (MW)');
    legend('Scaled Load','Original Load')
    xlim([0 141]);
end

for j = 1:length(episode_Load)
    if j > 1
        %Set generator maximums based on maximum hourly ramp rate
        %One hour ramping rate assumptions by fuel type
        %          R_coal = 20
        %          R_ng = 100
        %          R_oil = 20
        %          R_biomass = 20
        %          R_nuclear = 20
        %          R_hydro = 100
        %          R_storage = 100
        genout_now = results(j - 1).gen(:,PG); %extract current operating level
        for k=1:length(genout_now)
            %Coal generators
            if strcmp(mpc.genfuel{k},'coal') == 1
                R = 20; %ramping constraint
            end
            %Natural gas generators
            if strcmp(mpc.genfuel{k},'ng') == 1
                R = 100; %ramping constraint
            end
            %Oil generators
            if strcmp(mpc.genfuel{k},'oil') == 1
                R = 20; %ramping constraint
            end
            %Biomass generators
            if strcmp(mpc.genfuel{k},'biomass') == 1
                R = 20; %ramping constraint
            end
            %Nuclear generators
            if strcmp(mpc.genfuel{k},'nuclear') == 1
                R = 20; %ramping constraint
            end
            %Hydro generators
            if strcmp(mpc.genfuel{k},'hydro') == 1
                R = 100; %ramping constraint
            end
            %Energy storage
            if strcmp(mpc.genfuel{k},'storage') == 1
                R = 1000; %ramping constraint
            end
            %Implement ramping constraints 
            New_PMAX = genout_now(k) + R;
            if New_PMAX < True_PMAX(k)
                mpc.gen(k,PMAX) = New_PMAX;
            end
            New_PMIN = genout_now(k) - R;
            if New_PMIN > True_PMIN(k)
                mpc.gen(k,PMIN) = New_PMIN;
            end
        end
    end
    
    %Run MatPower case
    mpopt = mpoption('opf.dc.solver','GUROBI','verbose',0,'out.all',0);
    results(j) = rundcopf(mpc, mpopt);
    
end
end
